local FrameHeader = require "lustre.frame.frame_header"
local utils = require "spec.utils"
local MockSocket = require"spec.mock_socket".MockSocket

describe("FrameHeader", function()
  describe("decode/decode", function()
    it("can decode full header 8bit length", function()
      local bytes = string.char(0x80 | 0x40 | 0x20 | 0x10, 0x80 | 100, 0x80, 0x80, 0x80, 0x80)
      local fh = assert(FrameHeader.decode(bytes))
      utils.assert_fmt(fh.fin, "fin %s", fh.fin)
      utils.assert_fmt(fh.rsv1, "rsv1 %s", fh.rsv1)
      utils.assert_fmt(fh.rsv2, "rsv2 %s", fh.rsv2)
      utils.assert_fmt(fh.rsv3, "rsv3 %s", fh.rsv3)
      assert.are(fh.opcode:encode(), 0, "opcode")
      utils.assert_fmt(fh.masked, "masked %s", fh.masked)
      assert.are(fh.length, 100, "length")
      assert.are(fh.length_length, 0, "length_length")
      assert.are(fh.mask_length, 4, "mask_length")
      assert.are(fh.mask[1], 0x80, "mask[1]")
      assert.are(fh.mask[2], 0x80, "mask[2]")
      assert.are(fh.mask[3], 0x80, "mask[3]")
      assert.are(fh.mask[4], 0x80, "mask[4]")
      assert.are(fh:encode(), bytes, "fh:encode")
    end)
    it("can decode empty header 8bit length", function()
      local bytes = string.char(0x0, 100)
      local fh = assert(FrameHeader.decode(bytes))
      utils.assert_fmt(not fh.fin, "fin %s", fh.fin)
      utils.assert_fmt(not fh.rsv1, "rsv1 %s", fh.rsv1)
      utils.assert_fmt(not fh.rsv2, "rsv2 %s", fh.rsv2)
      utils.assert_fmt(not fh.rsv3, "rsv3 %s", fh.rsv3)
      utils.assert_fmt(fh.opcode:encode() == 0, "opcode %s", fh.opcode)
      utils.assert_fmt(not fh.masked, "masked %s", fh.masked)
      utils.assert_fmt(fh.length == 100, "length %s", fh.length)
      utils.assert_fmt(fh.length_length == 0, "length_length %s", fh.length_length)
      utils.assert_fmt(fh.mask_length == 0, "mask_length %s", fh.mask_length)
      utils.assert_fmt(not fh.mask, "mask %s", fh.mask)
      utils.assert_fmt(fh:encode() == bytes, "fh:encode\n%s\n%s", fh:encode(), bytes)
    end)
    it("can decode full header 16bit length", function()
      local bytes = string.char(0x80 | 0x40 | 0x20 | 0x10, 0x80 | 126, 1, 255, 0x80, 0x80, 0x80,
                                0x80)
      local fh = assert(FrameHeader.decode(bytes))
      utils.assert_fmt(fh.fin, "fin %s", fh.fin)
      utils.assert_fmt(fh.rsv1, "rsv1 %s", fh.rsv1)
      utils.assert_fmt(fh.rsv2, "rsv2 %s", fh.rsv2)
      utils.assert_fmt(fh.rsv3, "rsv3 %s", fh.rsv3)
      utils.assert_fmt(fh.opcode:encode() == 0, "opcode %s", fh.opcode)
      utils.assert_fmt(fh.masked, "masked %s", fh.masked)
      utils.assert_fmt(fh.length == 511, "length %s", fh.length)
      utils.assert_fmt(fh.length_length == 2, "length_length %s", fh.length_length)
      utils.assert_fmt(fh.mask_length == 4, "mask_length %s", fh.mask_length)
      utils.assert_fmt(fh.mask, "mask %s", fh.mask)
      utils.assert_fmt(fh:encode() == bytes, "fh:encode\n%s\n%s", fh:encode(), bytes)
    end)
    it("can decode empty header 16bit length", function()
      local bytes = string.char(0x0, 126, 1, 255)
      local fh = assert(FrameHeader.decode(bytes))
      utils.assert_fmt(not fh.fin, "fin %s", fh.fin)
      utils.assert_fmt(not fh.rsv1, "rsv1 %s", fh.rsv1)
      utils.assert_fmt(not fh.rsv2, "rsv2 %s", fh.rsv2)
      utils.assert_fmt(not fh.rsv3, "rsv3 %s", fh.rsv3)
      utils.assert_fmt(fh.opcode:encode() == 0, "opcode %s", fh.opcode)
      utils.assert_fmt(not fh.masked, "masked %s", fh.masked)
      utils.assert_fmt(fh.length == 511, "length %s", fh.length)
      utils.assert_fmt(fh.length_length == 2, "length_length %s", fh.length_length)
      utils.assert_fmt(fh.mask_length == 0, "mask_length %s", fh.mask_length)
      utils.assert_fmt(not fh.mask, "mask %s", fh.mask)
      utils.assert_fmt(fh:encode() == bytes, "fh:encode\n%q\n%q", fh:encode(), bytes)
    end)
    it("can decode full header 64bit length", function()
      local bytes = string.char(0x80 | 0x40 | 0x20 | 0x10, 0x80 | 127, 42, 42, 42, 42, 42, 42, 42,
                                42, 0x80, 0x80, 0x80, 0x80)
      local fh = assert(FrameHeader.decode(bytes))
      utils.assert_fmt(fh.fin, "fin %s", fh.fin)
      utils.assert_fmt(fh.rsv1, "rsv1 %s", fh.rsv1)
      utils.assert_fmt(fh.rsv2, "rsv2 %s", fh.rsv2)
      utils.assert_fmt(fh.rsv3, "rsv3 %s", fh.rsv3)
      utils.assert_fmt(fh.opcode:encode() == 0, "opcode %s", fh.opcode)
      utils.assert_fmt(fh.masked, "masked %s", fh.masked)
      utils.assert_fmt(fh.length == 3038287259199220266, "length %s", fh.length)
      utils.assert_fmt(fh.length_length == 8, "length_length %s", fh.length_length)
      utils.assert_fmt(fh.mask_length == 4, "mask_length %s", fh.mask_length)
      utils.assert_fmt(fh.mask[1] == 0x80, "mask[1] 0x%X ~= 0x%X", fh.mask[1], 0x80)
      utils.assert_fmt(fh.mask[2] == 0x80, "mask[2] 0x%X ~= 0x%X", fh.mask[1], 0x80)
      utils.assert_fmt(fh.mask[3] == 0x80, "mask[3] 0x%X ~= 0x%X", fh.mask[1], 0x80)
      utils.assert_fmt(fh.mask[4] == 0x80, "mask[4] 0x%X ~= 0x%X", fh.mask[1], 0x80)
      utils.assert_fmt(fh:encode() == bytes, "fh:encode\n%s\n%s", fh:encode(), bytes)
    end)
    it("can decode empty header 16bit length", function()
      local bytes = string.char(0x0, 127, 1, 1, 1, 1, 1, 1, 1, 1)
      local fh = assert(FrameHeader.decode(bytes))
      utils.assert_fmt(not fh.fin, "fin %s", fh.fin)
      utils.assert_fmt(not fh.rsv1, "rsv1 %s", fh.rsv1)
      utils.assert_fmt(not fh.rsv2, "rsv2 %s", fh.rsv2)
      utils.assert_fmt(not fh.rsv3, "rsv3 %s", fh.rsv3)
      utils.assert_fmt(fh.opcode:encode() == 0, "opcode %s", fh.opcode)
      utils.assert_fmt(not fh.masked, "masked %s", fh.masked)
      utils.assert_fmt(fh.length == 72340172838076673, "length %s", fh.length)
      utils.assert_fmt(fh.length_length == 8, "length_length %s", fh.length_length)
      utils.assert_fmt(fh.mask_length == 0, "mask_length %s", fh.mask_length)
      utils.assert_fmt(not fh.mask, "mask %s", fh.mask)
      utils.assert_fmt(fh:encode() == bytes, "fh:encode\n%s\n%s", fh:encode(), bytes)
    end)
    it("bad 16bit length == nil length", function()
      local bytes = string.char(0x0, 126, 1)
      local fh = assert(FrameHeader.decode(bytes))
      utils.assert_fmt(not fh.fin, "fin %s", fh.fin)
      utils.assert_fmt(not fh.rsv1, "rsv1 %s", fh.rsv1)
      utils.assert_fmt(not fh.rsv2, "rsv2 %s", fh.rsv2)
      utils.assert_fmt(not fh.rsv3, "rsv3 %s", fh.rsv3)
      utils.assert_fmt(fh.opcode:encode() == 0, "opcode %s", fh.opcode)
      utils.assert_fmt(not fh.masked, "masked %s", fh.masked)
      utils.assert_fmt(fh.length == nil, "length %s", fh.length)
      utils.assert_fmt(fh.length_length == 2, "length_length %s", fh.length_length)
      utils.assert_fmt(fh.mask_length == 0, "mask_length %s", fh.mask_length)
      utils.assert_fmt(not fh.mask, "mask %s", fh.mask)
      local b, err = fh:encode()
      assert(not b, "expected encode to fail with nil length")
      assert.are(err, "Invalid length")
    end)
    it("bad 64bit length == nil length", function()
      local bytes = string.char(0x0, 127, 1)
      local fh = assert(FrameHeader.decode(bytes))
      utils.assert_fmt(not fh.fin, "fin %s", fh.fin)
      utils.assert_fmt(not fh.rsv1, "rsv1 %s", fh.rsv1)
      utils.assert_fmt(not fh.rsv2, "rsv2 %s", fh.rsv2)
      utils.assert_fmt(not fh.rsv3, "rsv3 %s", fh.rsv3)
      utils.assert_fmt(fh.opcode:encode() == 0, "opcode %s", fh.opcode)
      utils.assert_fmt(not fh.masked, "masked %s", fh.masked)
      utils.assert_fmt(fh.length == nil, "length %s", fh.length)
      utils.assert_fmt(fh.length_length == 8, "length_length %s", fh.length_length)
      utils.assert_fmt(fh.mask_length == 0, "mask_length %s", fh.mask_length)
      utils.assert_fmt(not fh.mask, "mask %s", fh.mask)
      local b, err = fh:encode()
      assert(not b, "expected encode to fail with nil length")
      assert.are(err, "Invalid length")
    end)
    it("too big 64bit length == nil length", function()
      local bytes = string.char(0x0, 127, 0xFF, 0, 0, 0, 0, 0, 0, 1)
      local fh = assert(FrameHeader.decode(bytes))
      utils.assert_fmt(not fh.fin, "fin %s", fh.fin)
      utils.assert_fmt(not fh.rsv1, "rsv1 %s", fh.rsv1)
      utils.assert_fmt(not fh.rsv2, "rsv2 %s", fh.rsv2)
      utils.assert_fmt(not fh.rsv3, "rsv3 %s", fh.rsv3)
      utils.assert_fmt(fh.opcode:encode() == 0, "opcode %s", fh.opcode)
      utils.assert_fmt(not fh.masked, "masked %s", fh.masked)
      utils.assert_fmt(fh.length == nil, "length %s", fh.length)
      utils.assert_fmt(fh.length_length == 8, "length_length %s", fh.length_length)
      utils.assert_fmt(fh.mask_length == 0, "mask_length %s", fh.mask_length)
      utils.assert_fmt(not fh.mask, "mask %s", fh.mask)
      local b, err = fh:encode()
      assert(not b, "expected encode to fail with nil length")
      assert.are(err, "Invalid length")
    end)
  end)
  describe("decode/stream", function()
    it("can decode full header 8bit length", function()
      local socket = MockSocket.new({
        string.char(0x80 | 0x40 | 0x20 | 0x10, 0x80 | 100),
        string.char(0x80, 0x80, 0x80, 0x80),
      })
      local fh = assert(FrameHeader.from_stream(socket))
      utils.assert_fmt(fh.fin, "fin %s", fh.fin)
      utils.assert_fmt(fh.rsv1, "rsv1 %s", fh.rsv1)
      utils.assert_fmt(fh.rsv2, "rsv2 %s", fh.rsv2)
      utils.assert_fmt(fh.rsv3, "rsv3 %s", fh.rsv3)
      assert.are(fh.opcode:encode(), 0, "opcode")
      utils.assert_fmt(fh.masked, "masked %s", fh.masked)
      assert.are(fh.length, 100, "length")
      assert.are(fh.mask_length, 4, "mask_length")
      assert.are(fh.mask[1], 0x80, "mask[1]")
      assert.are(fh.mask[2], 0x80, "mask[2]")
      assert.are(fh.mask[3], 0x80, "mask[3]")
      assert.are(fh.mask[4], 0x80, "mask[4]")
    end)
    it("can decode empty header 8bit length", function()
      local socket = MockSocket.new({string.char(0x0, 100)})
      local fh = assert(FrameHeader.from_stream(socket))
      utils.assert_fmt(not fh.fin, "fin %s", fh.fin)
      utils.assert_fmt(not fh.rsv1, "rsv1 %s", fh.rsv1)
      utils.assert_fmt(not fh.rsv2, "rsv2 %s", fh.rsv2)
      utils.assert_fmt(not fh.rsv3, "rsv3 %s", fh.rsv3)
      utils.assert_fmt(fh.opcode:encode() == 0, "opcode %s", fh.opcode)
      utils.assert_fmt(not fh.masked, "masked %s", fh.masked)
      utils.assert_fmt(fh.length == 100, "length %s", fh.length)
      utils.assert_fmt(fh.mask_length == 0, "mask_length %s", fh.mask_length)
      utils.assert_fmt(not fh.mask, "mask %s", fh.mask)
    end)
    it("can decode full header 16bit length", function()
      local socket = MockSocket.new({
        string.char(0x80 | 0x40 | 0x20 | 0x10, 0x80 | 126), string.char(1, 255),
        string.char(0x80, 0x80, 0x80, 0x80),
      })
      local fh = assert(FrameHeader.from_stream(socket))
      utils.assert_fmt(fh.fin, "fin %s", fh.fin)
      utils.assert_fmt(fh.rsv1, "rsv1 %s", fh.rsv1)
      utils.assert_fmt(fh.rsv2, "rsv2 %s", fh.rsv2)
      utils.assert_fmt(fh.rsv3, "rsv3 %s", fh.rsv3)
      utils.assert_fmt(fh.opcode:encode() == 0, "opcode %s", fh.opcode)
      utils.assert_fmt(fh.masked, "masked %s", fh.masked)
      utils.assert_fmt(fh.length == 511, "length %s", fh.length)
      utils.assert_fmt(fh.mask_length == 4, "mask_length %s", fh.mask_length)
      utils.assert_fmt(fh.mask, "mask %s", fh.mask)
    end)
    it("can decode empty header 16bit length", function()
      local socket = MockSocket.new({string.char(0x0, 126), string.char(1, 255)})
      local fh = assert(FrameHeader.from_stream(socket))
      utils.assert_fmt(not fh.fin, "fin %s", fh.fin)
      utils.assert_fmt(not fh.rsv1, "rsv1 %s", fh.rsv1)
      utils.assert_fmt(not fh.rsv2, "rsv2 %s", fh.rsv2)
      utils.assert_fmt(not fh.rsv3, "rsv3 %s", fh.rsv3)
      utils.assert_fmt(fh.opcode:encode() == 0, "opcode %s", fh.opcode)
      utils.assert_fmt(not fh.masked, "masked %s", fh.masked)
      utils.assert_fmt(fh.length == 511, "length %s", fh.length)
      utils.assert_fmt(fh.mask_length == 0, "mask_length %s", fh.mask_length)
      utils.assert_fmt(not fh.mask, "mask %s", fh.mask)
    end)
    it("can decode full header 64bit length", function()
      local socket = MockSocket.new({
        string.char(0x80 | 0x40 | 0x20 | 0x10, 0x80 | 127),
        string.char(42, 42, 42, 42, 42, 42, 42, 42),
        string.char(0x80, 0x80, 0x80, 0x80),
      })
      local fh = assert(FrameHeader.from_stream(socket))
      utils.assert_fmt(fh.fin, "fin %s", fh.fin)
      utils.assert_fmt(fh.rsv1, "rsv1 %s", fh.rsv1)
      utils.assert_fmt(fh.rsv2, "rsv2 %s", fh.rsv2)
      utils.assert_fmt(fh.rsv3, "rsv3 %s", fh.rsv3)
      utils.assert_fmt(fh.opcode:encode() == 0, "opcode %s", fh.opcode)
      utils.assert_fmt(fh.masked, "masked %s", fh.masked)
      utils.assert_fmt(fh.length == 3038287259199220266, "length %s", fh.length)
      utils.assert_fmt(fh.mask_length == 4, "mask_length %s", fh.mask_length)
      utils.assert_fmt(fh.mask[1] == 0x80, "mask[1] 0x%X ~= 0x%X", fh.mask[1], 0x80)
      utils.assert_fmt(fh.mask[2] == 0x80, "mask[2] 0x%X ~= 0x%X", fh.mask[1], 0x80)
      utils.assert_fmt(fh.mask[3] == 0x80, "mask[3] 0x%X ~= 0x%X", fh.mask[1], 0x80)
      utils.assert_fmt(fh.mask[4] == 0x80, "mask[4] 0x%X ~= 0x%X", fh.mask[1], 0x80)
    end)
    it("can decode empty header 64bit length", function()
      local socket = MockSocket.new({
        string.char(0x0, 127), string.char(1, 1, 1, 1, 1, 1, 1, 1),
      })
      local fh = assert(FrameHeader.from_stream(socket))
      utils.assert_fmt(not fh.fin, "fin %s", fh.fin)
      utils.assert_fmt(not fh.rsv1, "rsv1 %s", fh.rsv1)
      utils.assert_fmt(not fh.rsv2, "rsv2 %s", fh.rsv2)
      utils.assert_fmt(not fh.rsv3, "rsv3 %s", fh.rsv3)
      utils.assert_fmt(fh.opcode:encode() == 0, "opcode %s", fh.opcode)
      utils.assert_fmt(not fh.masked, "masked %s", fh.masked)
      utils.assert_fmt(fh.length == 72340172838076673, "length %s", fh.length)
      utils.assert_fmt(fh.mask_length == 0, "mask_length %s", fh.mask_length)
      utils.assert_fmt(not fh.mask, "mask %s", fh.mask)
    end)
    it("too big 64bit length == nil length", function()
      local socket = MockSocket.new({
        string.char(0x0, 127), string.char(0xFF, 0, 0, 0, 0, 0, 0, 1),
      })
      local fh = assert(FrameHeader.from_stream(socket))
      utils.assert_fmt(not fh.fin, "fin %s", fh.fin)
      utils.assert_fmt(not fh.rsv1, "rsv1 %s", fh.rsv1)
      utils.assert_fmt(not fh.rsv2, "rsv2 %s", fh.rsv2)
      utils.assert_fmt(not fh.rsv3, "rsv3 %s", fh.rsv3)
      utils.assert_fmt(fh.opcode:encode() == 0, "opcode %s", fh.opcode)
      utils.assert_fmt(not fh.masked, "masked %s", fh.masked)
      utils.assert_fmt(fh.length == nil, "length %s", fh.length)
      utils.assert_fmt(fh.mask_length == 0, "mask_length %s", fh.mask_length)
      utils.assert_fmt(not fh.mask, "mask %s", fh.mask)
    end)
  end)
  describe("builder", function()
    it("builds correctly", function()
      local fh = FrameHeader:default()
      utils.assert_fmt(fh.fin, "fmt")
      utils.assert_fmt(not fh.rsv1, "rsv1")
      utils.assert_fmt(not fh.rsv2, "rsv2")
      utils.assert_fmt(not fh.rsv3, "rsv3")
      utils.assert_fmt(not fh.masked, "masked")
      utils.assert_fmt(not fh.mask, "mask")
      assert.are(fh.mask_length, 0, "mask_length")
      assert.are(fh.length_length, 0, "length_length")
      assert.are(fh.length, 0, "length")
      assert.are(fh.opcode:encode(), 8, "opcode")
      fh:set_fin(false):set_rsv1(true):set_rsv2(true):set_rsv3(true):set_mask({
        1, 1, 1, 1,
      }):set_length(0xFFF):set_opcode(1)
      utils.assert_fmt(not fh.fin, "fmt")
      utils.assert_fmt(fh.rsv1, "rsv1")
      utils.assert_fmt(fh.rsv2, "rsv2")
      utils.assert_fmt(fh.rsv3, "rsv3")
      utils.assert_fmt(fh.masked, "masked")
      utils.assert_fmt(fh.mask, "mask")
      assert.are(fh.mask_length, 4, "mask_length")
      assert.are(fh.length_length, 2, "length_length")
      assert.are(fh.length, 0xFFF, "length")
      assert.are(fh.opcode:encode(), 1, "opcode")

    end)
  end)
end)
