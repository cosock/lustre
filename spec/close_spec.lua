local close = require "lustre.frame.close"
local CloseCode = close.CloseCode
local CloseFrame = close.CloseFrame
local utils = require "spec.utils"

describe("close", function()
  describe("CloseCode", function()
    describe("constructors", function()
      it("normal", function()
        local cc = CloseCode.normal()
        utils.assert_eq(cc.type, "normal")
        utils.assert_eq(cc.value, 1000)
      end)
      it("away", function()
        local cc = CloseCode.away()
        utils.assert_eq(cc.type, "away")
        utils.assert_eq(cc.value, 1001)
      end)
      it("protocol", function()
        local cc = CloseCode.protocol()
        utils.assert_eq(cc.type, "protocol")
        utils.assert_eq(cc.value, 1002)
      end)
      it("unsupported", function()
        local cc = CloseCode.unsupported()
        utils.assert_eq(cc.type, "unsupported")
        utils.assert_eq(cc.value, 1003)
      end)
      it("status", function()
        local cc = CloseCode.status()
        utils.assert_eq(cc.type, "status")
        utils.assert_eq(cc.value, 1005)
      end)
      it("abnormal", function()
        local cc = CloseCode.abnormal()
        utils.assert_eq(cc.type, "abnormal")
        utils.assert_eq(cc.value, 1006)
      end)
      it("invalid", function()
        local cc = CloseCode.invalid()
        utils.assert_eq(cc.type, "invalid")
        utils.assert_eq(cc.value, 1007)
      end)
      it("policy", function()
        local cc = CloseCode.policy()
        utils.assert_eq(cc.type, "policy")
        utils.assert_eq(cc.value, 1008)
      end)
      it("size", function()
        local cc = CloseCode.size()
        utils.assert_eq(cc.type, "size")
        utils.assert_eq(cc.value, 1009)
      end)
      it("extension", function()
        local cc = CloseCode.extension()
        utils.assert_eq(cc.type, "extension")
        utils.assert_eq(cc.value, 1010)
      end)
      it("error", function()
        local cc = CloseCode.error()
        utils.assert_eq(cc.type, "error")
        utils.assert_eq(cc.value, 1011)
      end)
      it("restart", function()
        local cc = CloseCode.restart()
        utils.assert_eq(cc.type, "restart")
        utils.assert_eq(cc.value, 1012)
      end)
      it("again", function()
        local cc = CloseCode.again()
        utils.assert_eq(cc.type, "again")
        utils.assert_eq(cc.value, 1013)
      end)
      it("tls", function()
        local cc = CloseCode.tls()
        utils.assert_eq(cc.type, "tls")
        utils.assert_eq(cc.value, 1015)
      end)
      it("decode/encode reserved", function()
        for i = 1016, 2999 do
          local bytes = string.char(i >> 8, i & 255)
          local cc = CloseCode.decode(bytes)
          utils.assert_eq(cc.value, i)
          utils.assert_eq(cc.type, "reserved")
          utils.assert_eq(cc:encode(), bytes)
        end
      end)
      it("decode/encode iana", function()
        for i = 3000, 3999 do
          local bytes = string.char(i >> 8, i & 255)
          local cc = CloseCode.decode(bytes)
          utils.assert_eq(cc.value, i)
          utils.assert_eq(cc.type, "iana")
          utils.assert_eq(cc:encode(), bytes)
        end
      end)
      it("decode/encode library", function()
        for i = 4000, 4999 do
          local bytes = string.char(i >> 8, i & 255)
          local cc = CloseCode.decode(bytes)
          utils.assert_eq(cc.value, i)
          utils.assert_eq(cc.type, "library")
          utils.assert_eq(cc:encode(), bytes)
        end
      end)
    end)
  end)
  describe("CloseFrame", function()
    it("encode/decode", function()
      local bytes = string.char(0, 0) .. "asdf"
      local cf = assert(CloseFrame.decode(bytes))
      utils.assert_eq(cf:encode(), bytes)
    end)
  end)
end)
