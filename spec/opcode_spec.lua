local utils = require "spec.utils"
local OpCode = require "lustre.frame.opcode"

describe("OpCode", function()
  describe("encode/decode", function()
    it("data-continue", function()
      local code = 0
      local oc = OpCode.decode(code)
      utils.assert_eq(oc.type, "data")
      utils.assert_eq(oc.sub, "continue")
      utils.assert_eq(oc.value, nil)
      utils.assert_eq(oc:encode(), code)
    end)
    it("data-text", function()
      local code = 1
      local oc = OpCode.decode(code)
      utils.assert_eq(oc.type, "data")
      utils.assert_eq(oc.sub, "text")
      utils.assert_eq(oc.value, nil)
      utils.assert_eq(oc:encode(), code)
    end)
    it("data-binary", function()
      local code = 2
      local oc = OpCode.decode(code)
      utils.assert_eq(oc.type, "data")
      utils.assert_eq(oc.sub, "binary")
      utils.assert_eq(oc.value, nil)
      utils.assert_eq(oc:encode(), code)
    end)
    it("data-reserved", function()
      for code = 3, 7 do
        local oc = OpCode.decode(code)
        utils.assert_eq(oc.type, "data")
        utils.assert_eq(oc.sub, "reserved")
        utils.assert_eq(oc.value, code)
        utils.assert_eq(oc:encode(), code)
      end
    end)
    it("data-control", function()
      local code = 8
      local oc = OpCode.decode(code)
      utils.assert_eq(oc.type, "control")
      utils.assert_eq(oc.sub, "close")
      utils.assert_eq(oc.value, nil)
      utils.assert_eq(oc:encode(), code)
    end)
    it("data-control", function()
      local code = 9
      local oc = OpCode.decode(code)
      utils.assert_eq(oc.type, "control")
      utils.assert_eq(oc.sub, "ping")
      utils.assert_eq(oc.value, nil)
      utils.assert_eq(oc:encode(), code)
    end)
    it("data-control", function()
      local code = 10
      local oc = OpCode.decode(code)
      utils.assert_eq(oc.type, "control")
      utils.assert_eq(oc.sub, "pong")
      utils.assert_eq(oc.value, nil)
      utils.assert_eq(oc:encode(), code)
    end)
    it("data-control", function()
      for code = 11, 15 do
        local oc = OpCode.decode(code)
        utils.assert_eq(oc.type, "control")
        utils.assert_eq(oc.sub, "reserved")
        utils.assert_eq(oc.value, code)
        utils.assert_eq(oc:encode(), code)
      end
    end)
    it("out of range", function()
      local oc = OpCode.decode(16)
      utils.assert_eq(oc, nil)
    end)
    it("bad values", function()
      local oc = OpCode.from("junk")
      local b, err = oc:encode()
      assert(not b, "expected no bytes")
      utils.assert_eq(err, "Invalid opcode")
    end)
    describe("type constructors", function()
      it("ping", function()
        local oc = OpCode.ping()
        utils.assert_eq(oc.type, "control")
        utils.assert_eq(oc.sub, "ping")
        utils.assert_eq(oc:encode(), 9)
      end)
      it("pong", function()
        local oc = OpCode.pong()
        utils.assert_eq(oc.type, "control")
        utils.assert_eq(oc.sub, "pong")
        utils.assert_eq(oc:encode(), 10)
      end)
      it("close", function()
        local oc = OpCode.close()
        utils.assert_eq(oc.type, "control")
        utils.assert_eq(oc.sub, "close")
        utils.assert_eq(oc:encode(), 8)
      end)
      it("continue", function()
        local oc = OpCode.continue()
        utils.assert_eq(oc.type, "data")
        utils.assert_eq(oc.sub, "continue")
        utils.assert_eq(oc:encode(), 0)
      end)
      it("text", function()
        local oc = OpCode.text()
        utils.assert_eq(oc.type, "data")
        utils.assert_eq(oc.sub, "text")
        utils.assert_eq(oc:encode(), 1)
      end)
      it("binary", function()
        local oc = OpCode.binary()
        utils.assert_eq(oc.type, "data")
        utils.assert_eq(oc.sub, "binary")
        utils.assert_eq(oc:encode(), 2)
      end)
    end)
  end)
end)
